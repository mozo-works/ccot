a:14:{s:7:"attribs";a:4:{s:5:"xmlns";s:36:"http://pear.php.net/dtd/rest.release";s:9:"xmlns:xsi";s:41:"http://www.w3.org/2001/XMLSchema-instance";s:11:"xmlns:xlink";s:28:"http://www.w3.org/1999/xlink";s:18:"xsi:schemaLocation";s:81:"http://pear.php.net/dtd/rest.release     http://pear.php.net/dtd/rest.release.xsd";}s:1:"p";a:2:{s:7:"attribs";a:1:{s:10:"xlink:href";s:33:"/rest/p/db_dataobject_formbuilder";}s:8:"_content";s:25:"DB_DataObject_FormBuilder";}s:1:"c";s:12:"pear.php.net";s:1:"v";s:6:"0.10.0";s:2:"st";s:4:"beta";s:1:"l";s:11:"PHP License";s:1:"m";s:12:"justinpatrin";s:1:"s";s:86:"Class to automatically build HTML_QuickForm objects from a DB_DataObject-derived class";s:1:"d";s:1108:"DB_DataObject_FormBuilder will aid you in rapid application development using the packages DB_DataObject and HTML_QuickForm. For having a quick but working prototype of your application, simply model the database, run DataObject´s createTable script over it and write a script that passes one of the resulting objects to the FormBuilder class. The FormBuilder will automatically generate a simple but working HTML_QuickForm object that you can use to test your application. It also provides a processing method that will automatically detect if an insert() or update() command has to be executed after the form has been submitted. If you have set up DataObject´s links.ini file correctly, it will also automatically detect if a table field is a foreign key and will populate a selectbox with the linked table's entries. There are many optional parameters that you can place in your DataObjects.ini or in the properties of your derived classes, that you can use to fine-tune the form-generation, gradually turning the prototypes into fully-featured forms, and you can take control at any stage of the process.";s:2:"da";s:19:"2004-08-27 20:39:04";s:1:"n";s:5524:"This version introduces major BC breaks, mostly dealing with the names and locations of configuration variables most of which can be corrected by using a provided fix script(s). If you have already used FormBuilder in your current projects, please read all of this very carefully!

MAJOR BC BREAKS -- Please read all comments below before trying to use this version!
This checkin is the result of an attempt at unifying the various parts of the FormBuilder API, unifying the coding styles, and conforming to PEAR CS. This *will* break your application.

All options are now configurable through the DataObject. Any option that could be in the FormBuilder can now be in the DataObject.

All options in the DataObject now have a "fb_" prefix to distinguish them from field names.

All options in both the FormBuilder and DataObject were changed to use studlyCaps instead_of_underscores.

Some few options have changed names. For example, follow_links is now linkDisplayLevel.

All options may be specified in the [DB_DataObject_FormBuilder] section of the ini file. For options that are DataObject specific, these are set as defaults. The DataObject may change them through its options. linkDisplayFields and linkOrderFields (see below) are arrays and set the same as elementTypeMap.

All options in the [DB_DataObject_FormBuilder] section of the ini file are copied into the FormBuilder when it is instantiated. Hence, changing $GLOBALS['_DB_DATAOVJECT_FORMBUILDER']['CONFIG'] after you create your FormBuilder will no longer work.

All options in the DataObject (except for those that start with "select") are copied to the FormBuilder after preGenerateForm is called. This is to cut down on the internal complexity of FormBuilder. This means that you cannot change options in the DataObject after preGenerateForm (such as in postGenerateForm). We don't see this as a problem as you can set everything up before then and (nearly) all options are used once postGenerateForm is called. If you know of a problem with this, please send us an e-mail or a bug report. This also means that you cannot re-use a FormBuilder object as the settings of the previous FormBuilder will persist.

The database.formBuilder.ini file is no longer used. Select display and order fields should be put in the DO file as linkDisplayFields and linkOrderFields. The fix0.9.0Files.php script will move these options into your DataObject classes automatically.

If you were previously using the 0.9.0 release, the script in CVS called fix0.9.0Files.php should be able to fix all BC breaks in your code and ini files. If it doesn't please send an e-mail to justinpatrin@php.net so that I can fix it. You can download the script from this URL: http://cvs.php.net/pear/DB_DataObject_FormBuilder/fix0.9.0Files.php

If you were previously using a CVS version of FormBuilder.php after 1.36 up to 1.52, the script in CVS called fixPre1.52CVSFiles.php should be able to fix any BC problems you have. All this script does is rename sleect*Fields to link*Fields. You can download the script from this URL: http://cvs.php.net/pear/DB_DataObject_FormBuilder/fixPre1.52CVSFiles.php

For a list of all changes, please see the CVS changelogs for FormBuilder.php. Of particular interest should be the changelog for CVS version 1.37.

FURTHER IMPROVEMENTS AND MODIFICATIONS:
- Added crossLinkSeparator option
- Added TIME element handling (Thanks to Frank Fahs)
- Added support for ENUM select or radio generation
3 new options: enumFields, enumOptions, and enumOptionsCallback
- Added linkElementTypes option
- selectAddEmpty is now an array which should be filled with link fields that should have an empty option in their select box i.e., the option has moved from the linked to the linker
- Removed QuickForm-specific functions from main class and introduced new QuickForm-driver class. A third parameter was added to the factory method to determine which driver is to be used.
- Fixed bug 1829 - date callbacks not called correctly
- Fixed issues with unset member vars and $options array in constructor
- Better array handling for ini-arrays
- Added more ini options to array handling
- Array based options may be single values without a comma
- Array based options which have no need for keys (selectDisplayFields, etc.) don't need the key
- Fixed bug where linked fields in selectDisplayFields didn't know their own selectDisplayFields
- Fixed bug where cross/tripleLinks are frozen if not in userEditableFields array
- Added missing createSubmit option
- Fixed Bug #1715 (minutes and seconds are lost in _array2date)
- Got rid of Required QF rule for NOT NULL fields which are frozen
- Fixed bug 1699 (Notice: Undefined property _triple/_crossLinks)
- Fixed bug 1700 (Notice: Array to string conversion)
- Added freezing of triplelink elements accoring to elements_to_freeze
- Added missing code to freeze fields not in userEditableFields (if it exists)
- Added code to allow any field to be a link field
- Fixed bug #1500, adding fallback to displaying the primary key in selectboxes if a select_display_field cannot be identified (patch by Justin Patrin)
- Fixed bug #1459 (Thanks to Justin Patrin)
- New feature: Add required rule for NOT NULL fields (Bug #1487, thanks to Justin Patrin)
- New feature: Add field name to error messages.
- Small change to getDataObjectSelectDisplayValue() making use of getLink() instead of links().

The FormBuilder Wiki has up-to-date documentation:
http://opensource.21st.de/tiki-index.php?page=DB_DataObject_FormBuilder";s:1:"f";s:5:"28217";s:1:"g";s:56:"http://pear.php.net/get/DB_DataObject_FormBuilder-0.10.0";s:1:"x";a:1:{s:7:"attribs";a:1:{s:10:"xlink:href";s:18:"package.0.10.0.xml";}}}