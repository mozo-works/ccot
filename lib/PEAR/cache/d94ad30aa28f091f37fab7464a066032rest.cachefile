a:14:{s:7:"attribs";a:4:{s:5:"xmlns";s:36:"http://pear.php.net/dtd/rest.release";s:9:"xmlns:xsi";s:41:"http://www.w3.org/2001/XMLSchema-instance";s:11:"xmlns:xlink";s:28:"http://www.w3.org/1999/xlink";s:18:"xsi:schemaLocation";s:81:"http://pear.php.net/dtd/rest.release     http://pear.php.net/dtd/rest.release.xsd";}s:1:"p";a:2:{s:7:"attribs";a:1:{s:10:"xlink:href";s:33:"/rest/p/db_dataobject_formbuilder";}s:8:"_content";s:25:"DB_DataObject_FormBuilder";}s:1:"c";s:12:"pear.php.net";s:1:"v";s:5:"0.9.0";s:2:"st";s:4:"beta";s:1:"l";s:11:"PHP License";s:1:"m";s:6:"mw21st";s:1:"s";s:86:"Class to automatically build HTML_QuickForm objects from a DB_DataObject-derived class";s:1:"d";s:1108:"DB_DataObject_FormBuilder will aid you in rapid application development using the packages
DB_DataObject and HTML_QuickForm. For having a quick but working prototype of your application,
simply model the database, run DataObject´s createTable script over it and write a script
that passes one of the resulting objects to the FormBuilder class.
The FormBuilder will automatically generate a simple but working HTML_QuickForm object that you can
use to test your application. It also provides a processing method that will automatically detect
if an insert() or update() command has to be executed after the form has been submitted.
If you have set up DataObject´s links.ini file correctly, it will also automatically detect
if a table field is a foreign key and will populate a selectbox with the linked table´s entries.
There are many optional parameters that you can place in your DataObjects.ini or in the properties
of your derived classes, that you can use to fine-tune the form-generation, gradually turning
the prototypes into fully-featured forms, and you can take control at any stage of the process.";s:2:"da";s:19:"2004-05-15 18:29:51";s:1:"n";s:3911:"Lots of lots of fixes/changes:
- New configuration option "elementTypeMap": Allows you to define
  a list of FormBuilder field types and HTML_QuickForm element types
  that should be used for those field types. This way, you can for
  example use a WYSYWIG HTML editing component instead of textareas.
- New configuration options: "dateToDatabaseCallback" and
  "dateFromDatabaseCallback" allow you to define callback functions
  for date format conversion. This way, you can use any input and
  storage format for dates that you desire.
- Fixed bug #624: Incompatibility with schema files generated by
  DB_DataObject 1.4.0 and up. Side-effect: FormBuilder now also
  recognizes DATE, DATETIME and TEXT fields automatically, so there
  is no more need to use class properties to define them manually.
- Conversion of ISO dates to QuickForm date arrays no longer
  relies on strtotime(), but uses PEAR::Date instead to get rid of the
  date range limitations of Unix timestamps
- You can now also use DATETIME fields, as more formatting
  options for date fields are supported (m,M,d,Y,H,i,s)
- New experimental option "dateFieldLanguage" allows setting the
  language for date fields, this doesn't seem to work yet though
- useForm() now knows a second parameter that allows to add elements
  from an existing form to the generated one ... this, too, is to be considered
  highly experimental as the current implementation relies on supposedly private
  QuickForm properties to be public
- Support for a new callback method in your DataObjects: "dateOptions()"
  allows to return an option array for all or individual date elements. See docs
  for QuickForm's date element for details on possible options
- Added support for recursive link lookups (by Justin Patrin)
- Implemented changes by Norbert Moscnik:
  a) added "fieldsToRender" configuration option
  b) added "userEditableFields" configuration option
  c) added "forced_values" configuration option
  d) additional empty option (value="") as the first element of the <select> lists
- Fixed file upload handling: http://pear.php.net/bugs/bug.php?id=423
- Added usage of setter methods: http://pear.php.net/bugs/bug.php?id=422
- When processing the form, the new getUserEditableFields() method is used
  to check against manipulated POST requests
- Added support for definition of display_fields and custom field ordering in
  a separate .ini file (contributed by Justin Patrin)
- Fixed: Threw notices when no primary key was detected in processForm().
  Will now exit and return false.
- Added: New method forceQueryType() will let you override the autodetection
  for the query command (insert/update) using new predefined constants.
- Fixed inconsistency with documentation regarding hide_primary_key (spotted by Norbert Mocsnik)
- Fixed bug with checks for postProcess() and preProcess() user-methods, spotted by Ron McClain
- Fixed bug that occured when building selectboxes (if select_order_field was not defined,
  and the linked class had its own select_display_field property, FormBuilder was trying
  to order by a nonexisting field)
- Fixed small issue in processForm method (detection if submitted values really belong 
  to the current DataObject)
- Minor change in configuration method (check inline docs!!)
- New options "createSubmit" and "submitText" to set creation of
  a submit button on/off and specify its text
- fix bug preventing the options array from being used (Arnaud Limbourg)
- use raiseError instead of new PEAR_Error, use a variable to make php5 happy (Arnaud Limbourg)
- Automatically making the primary key a hidden field is now optional
- Fixed notices when working with E_ALL
- Fixed bug with element reordering (Arnaud Limbourg)
- Additions and corrections in inline docs
- Changed bullshit implementation: Existing form objects are no longer passed
  through the options array, but by using a new method useForm().";s:1:"f";s:5:"16958";s:1:"g";s:55:"http://pear.php.net/get/DB_DataObject_FormBuilder-0.9.0";s:1:"x";a:1:{s:7:"attribs";a:1:{s:10:"xlink:href";s:17:"package.0.9.0.xml";}}}